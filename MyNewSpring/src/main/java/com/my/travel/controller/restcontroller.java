package com.my.travel.controller;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.jdbc.support.MetaDataAccessException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.my.travel.components.ToAndApp;
import com.my.travel.dao.CityRepository;
import com.my.travel.dao.PicRepository;
import com.my.travel.dao.TripSightseeingRepository;
import com.my.travel.model2.Pic;
import com.my.travel.model2.TripSightseeing;
import com.my.travel.service.GetTableNames;

//import main.java.com.my.model.Dish;
@CrossOrigin
@RestController
@RequestMapping(value = "/rest")
public class restcontroller {
    private static final String URL = "jdbc:mysql://mytrips81.coizdbobchof.us-east-1.rds.amazonaws.com:3306/travel1?useLegacyDatetimeCode=false&serverTimezone=Asia/Jerusalem&useSSL=false" ;
    private static final String USERNAME = "ilia";
    private static final String PASSWORD = "rds8811b";

	
/*	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private TripRepository tripRepository;
	
	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private SightseeingRepository sightseeingRepository;

	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private CityRepository cityRepository;
*/
	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private TripSightseeingRepository tripSightseeingRepository;
	
	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private PicRepository picRepository;

	@Autowired // Which is auto-generated by Spring, we will use it to handle the data
	private CityRepository cityRepository;
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	@GetMapping("/tststst")
	public List<String> getCustomResult(){
		GetTableNames getTableNames = new GetTableNames();
		try {
		    Object o = JdbcUtils.extractDatabaseMetaData(jdbcTemplate.getDataSource(), getTableNames);
		    System.out.println(o);
		} catch (MetaDataAccessException e) {
		    System.out.println(e);
		}
		return Arrays.asList("One", "Two", "Three");
	}

	public class CustomResultRowMapper implements RowMapper {
	    public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
	        List<String> customResult = new  ArrayList<String>() ;
	        customResult.add(rs.getString(rowNum));
	      
	        return customResult;
	    }
	}
	
	
	@GetMapping("/trippic/{id}")
	public List<ToAndApp> retrievefortrip(@PathVariable int id) {
		
		System.out.println("  trippic 	");
		List<TripSightseeing> tripSightseeings=tripSightseeingRepository.findAllByTripCityIdcities(id);
		String globalc=cityRepository.findById(id).get().getCityName();
		List<ToAndApp> tmp=new ArrayList<ToAndApp>();
		tripSightseeings.forEach(a->{
			List<Pic> pictmp= picRepository.findAllBytripSightseeingIdtripSightseeingIn(a.getIdtripSightseeing());
			ToAndApp andApp=new ToAndApp();
			andApp.setSightname(a.getSightseeing().getSightseeingsname());
			andApp.setAddr(pictmp.stream().map(bp->bp.getPicsAddr()).collect(Collectors.toList()));
		//	pictmp.stream().forEach(ab->{andApp.setImgaddr(ab.getPicsAddr());});
			
			andApp.setImgaddr("www://");
			andApp.setTrip(globalc);
			andApp.setSight(a.getSightseeing().getSightseeingsname());
			tmp.add(andApp);
			
	
			
		});
		
		return tmp;

	}
	
	
	@GetMapping("/tststst11")
	public List<String> getres() throws SQLException{
		
		
		
		List<String> ans=new ArrayList<String>();
	   	try{
    	    Class.forName("com.mysql.jdbc.Driver");
    	} catch (ClassNotFoundException ex){
    	    System.out.println("Error found " + ex);
    	    ex.printStackTrace();
    	}

    	// Here is where the error pops up
    	Connection connection1 =DriverManager.getConnection(URL,USERNAME,PASSWORD);
    

        try (Connection connection =
        		DriverManager.getConnection(URL,USERNAME,PASSWORD);)        {

            DatabaseMetaData metadata = connection.getMetaData();
            ResultSet resultSet =
                metadata.getColumns(null, null, "Trip", null);

            while (resultSet.next()) {
                String name = resultSet.getString("COLUMN_NAME");
                String type = resultSet.getString("TYPE_NAME");
                int size = resultSet.getInt("COLUMN_SIZE");
                String tmp="Column name: [" + name + "]; " +
                        "type: [" + type + "]; size: [" + size + "]";
                ans.add(tmp);
                System.out.println("Column name: [" + name + "]; " +
                    "type: [" + type + "]; size: [" + size + "]");
            }
            
            
            DatabaseMetaData md = connection.getMetaData();
            ResultSet rs = md.getTables(null, null, "%", null);
            while (rs.next()) {
            	ans.add("       ");
            	ans.add(rs.getString(3));
              System.out.println(rs.getString(3));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
		return ans;
	}
	
/*	
	@GetMapping("/tst")
	public List<Object> get3pics() {
		return picRepository.findFrontPics(PageRequest.of(0, 3, Sort.by(...)));
	}*/
}
